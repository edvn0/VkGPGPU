#version 450

layout(local_size_x = 16, local_size_y = 16) in;

struct Mat4 {
  mat4 matrix;
};

layout(std140, set = 0, binding = 0) readonly buffer InputBufferA {
  Mat4 inputMatrix[];
}
input_buffer_a;

layout(std140, set = 0, binding = 1) readonly buffer InputBufferB {
  Mat4 inputMatrix[];
}
input_buffer_b;

layout(std140, set = 0, binding = 2) writeonly buffer OutputBuffer {
  Mat4 outputMatrix[];
}
output_buffer;

layout(std140, set = 0, binding = 3) uniform UniformBuffer { float something; }
ubo;

// Image you are processing
layout(set = 1, binding = 0, rgba8) readonly uniform image2D input_image;
layout(set = 1, binding = 1, rgba8) writeonly uniform image2D output_image;

void main() {
  // Compute global thread ID
  uint globalX = gl_GlobalInvocationID.x;
  uint globalY = gl_GlobalInvocationID.y;

  // Bounds checking
  if (globalX >= 1024 || globalY >= 1024) {
    return;
  }

  // Process the pixel at (globalX, globalY)
  vec4 pixel = imageLoad(input_image, ivec2(globalX, globalY));

  // Example processing: invert the color
  pixel = vec4(1.0) - pixel;

  // Store the result back to the image
  imageStore(output_image, ivec2(globalX, globalY), pixel);
}
