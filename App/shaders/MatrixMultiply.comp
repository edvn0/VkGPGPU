#version 460

struct Mat4 {
  mat4 matrix;
};

layout(std140, set = 0, binding = 0) readonly buffer InputBufferA {
  Mat4 inputMatrix[];
}
input_buffer_a;

layout(std140, set = 0, binding = 1) readonly buffer InputBufferB {
  Mat4 inputMatrix[];
}
input_buffer_b;

layout(std140, set = 0, binding = 2) writeonly buffer OutputBuffer {
  Mat4 outputMatrix[];
}
output_buffer;

layout(std140, set = 0, binding = 3) uniform UniformBuffer { float something; }
ubo;

layout (set = 1, binding = 0, rgba8) uniform readonly image2D inputImage;

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
  uint index = gl_GlobalInvocationID.x;

  output_buffer.outputMatrix[index].matrix = ubo.something * input_buffer_a.inputMatrix[index].matrix + input_buffer_b.inputMatrix[index].matrix;

  // imageStore(inputImage, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 0.6, 1.0));
}
