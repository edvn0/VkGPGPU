#version 460

struct Mat4
{
    mat4 matrix;
};

layout(std140, set = 0, binding = 0) readonly buffer InputBuffer
{
    Mat4 inputMatrix[];  
} input_buffer;

layout(std140, set = 0, binding = 1) writeonly buffer OutputBuffer
{
    Mat4 outputMatrix[];  
} output_buffer;

layout(std140, set = 0, binding = 2) uniform UniformBuffer
{
    float something;
} ubo;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;  

    // Add 1 to each row of each matrics
    output_buffer.outputMatrix[index] = input_buffer.inputMatrix[index];
    output_buffer.outputMatrix[index].matrix[0] = vec4(ubo.something);
}
