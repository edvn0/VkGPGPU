name: Clang17 CMake Build

on:
  push:
    branches:
      - "main"
      - "dev"
  pull_request:
    branches:
      - "main"
      - "dev"

env:
  BUILD_TYPE: RelWithDebInfo
  NINJA_STATUS: "[%f/%t] %c/s %e "

jobs:
  build:
    runs-on: ubuntu-latest
    if: |
      ! contains(github.event.head_commit.message, 'WIP')

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Update Ubuntu
        run: |
          sudo apt update
          sudo apt install wget git cmake -yq

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: g++-12 gcc-12 libtbb-dev libxinerama-dev libxcursor-dev
            libxi-dev mesa-utils libglu1-mesa-dev mesa-common-dev libxkbcommon-dev
            libglew-dev libglfw3-dev libglm-dev libao-dev libmpg123-dev
            mesa-vulkan-drivers libvulkan1 vulkan-tools vulkan-validationlayers
          version: 1.0

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          version: 1.11.1
          platform: linux

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-use-cache: true

      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: |
            ./llvm
          key: llvm-17

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17"
          env: true
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Configure CMake
        run: cmake
          -B build
          -D GPGPU_PIPELINE=ON
          -D ENABLE_TESTING=ON
          -D CMAKE_C_COMPILER=${{env.CC}}
          -D CMAKE_C_COMPILER_LAUNCHER=ccache
          -D CMAKE_CXX_COMPILER=${{env.CXX}}
          -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          -G Ninja

      - name: Build
        run: cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: build
        run: |
          ctest -C ${{env.BUILD_TYPE}} -T Test --output-junit Testing/junit-output.xml

      - name: Upload Test Results
        if: always()  # This ensures the artifact is uploaded even if the build or test fails
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/Testing/**/*.xml
